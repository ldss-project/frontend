/** Utilities for {@link Array}. */
export namespace Arrays {
  /**
   * @param init the initial value of the {@link Array}.
   * @param length the specified length.
   * @param generator the specified generator (default: identity). The next element of the
   *        {@link Array} is generated by applying this function to the previous element.
   * @return a new {@link Array} of the specified length generated by the specified generator.
   */
  export function generate<T>(init: T, length: number, generator: (prev: T) => T = _ => _): T[] {
    if (length <= 0) { throw Error("IllegalArgumentException: the length of the array cannot be negative or null.") }
    const array: T[] = [init]
    for (let i = 1; i < length; i++) { array[i] = generator(array[i-1]) }
    return array
  }

  /** Alias for {@link generate generate(init, length)}. */
  export function repeat<T>(init: T, length: number): T[] { return Arrays.generate(init, length) }

  /** Utilities for {@link Array}s of integers. */
  export class Int {
    /**
     * @param start the specified start (included).
     * @param length the specified length.
     * @return a new sequence of numbers from the specified start with the specified
     *         length as an {@link Array}.
     * @example
     * Arrays.Int.sequence(10, 5) // [10, 11, 12, 13, 14]
     */
    public static sequence(start: number, length: number): number[] {
      return Arrays.generate(start, length, _ => _ + 1)
    }
    /**
     * @param start the specified start (included).
     * @param end the specified end (excluded).
     * @return a new {@link Array} with elements from the specified start included
     *         to the specified end excluded.
     * @example
     * Arrays.Int.range(5, 10) // [5, 6, 7, 8, 9]
     */
    public static range(start: number, end: number): number[] { return Arrays.Int.sequence(start, end - start) }
    /** Alias for {@link range range(0, end)}. */
    public static until(end: number): number[] { return Arrays.Int.range(0, end) }
  }
}